__________________________________________________________________________________________________________________________________
GERANDO O PROJETO NO SPRING INITIALIZER
1. Acesse o site: https://start.spring.io/ 

2. Configure as opções do projeto:
- Project: Maven.
- Language: Java.
- Spring Boot: Selecione a versão estável mais recente (3.x ou superior).
- Group: com.example (ou outro de sua escolha).
- Artifact: kanban-api.
- Name: KanbanAPI.
- Description: API REST para gerenciar um quadro Kanban.
- Packaging: Jar.
- Java: Versão 17 (ou a versão do JDK instalado).

3. Adicionar Dependências:
Clique em Add Dependencies e escolha:
- Spring Web: para criar APIs REST.
- Spring Data JPA: para persistência no banco de dados.
- H2 Database: para usar o banco in-memory.

4. Clique em Generate.
- Isso irá gerar um arquivo .zip com o projeto configurado.
__________________________________________________________________________________________________________________________________
PASSO 2: IMPORTAR O PROJETO NO INTELLIJ COMMUNITY
1. Extraia o arquivo .zip
- Após o download, descompacte o arquivo para uma pasta no seu computador.

2. Abra o IntelliJ IDEA Community:
- Clique em File > Open.
- Navegue até a pasta do projeto extraído e clique em OK.

3. Configurar o Maven no IntelliJ:
- O IntelliJ reconhecerá automaticamente o arquivo pom.xml e configurará o Maven.
- Caso veja a opção Load Maven Changes no canto superior direito, clique nela para garantir que as dependências sejam baixadas.
__________________________________________________________________________________________________________________________________
COMO INSTALAR O JDK
Configurar o JDK:
- Vá para File > Project Structure > SDKs > + > Download JDK > version: 17 > vendor: Eclipse Temurin 17.0.13 > DOWNLOAD

ABRA O ARQUIVO KANBAN QUE EU DEIXEI NA PASTA ARQUIVOS 
__________________________________________________________________________________________________________________________________
CONFIGURANDO O BANCO DE DADOS H2

1. src/main/resources > application.properties
coloque este código:

spring.datasource.url=jdbc:h2:mem:testdb
spring.datasource.driverClassName=org.h2.Driver
spring.datasource.username=sa
spring.datasource.password=password
spring.jpa.database-platform=org.hibernate.dialect.H2Dialect
spring.h2.console.enabled=true
__________________________________________________________________________________________________________________________________
Executar o Projeto:
- Navegue até o arquivo KanbanApiApplication.java (localizado em src/main/java/com/example/kanbanapi).
COLE ESTE CÓDIGO
package com.example.kanban_api;

import org.springframework.boot.SpringApplication;
import org.springframework.boot.autoconfigure.SpringBootApplication;

@SpringBootApplication
public class KanbanApiApplication {

	public static void main(String[] args) {
		SpringApplication.run(KanbanApiApplication.class, args);
	}
}
- Clique com o botão direito no método main e selecione Run para rodar o projeto.

- src/main/java/com.example.nomeDoKanban > botao direito > New > Package > digite: model
- crie uma java class com o nome Tarefa e 
coloque este código:

package com.example.kanban_api.model;

import ch.qos.logback.core.status.Status;
import jakarta.persistence.*;

import java.time.LocalDate;

@Entity
public class Tarefa {

    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    private Long id;

    @Column(nullable = false)
    private String titulo;

    private String descricao;

    private LocalDate dataCriacao;

    @Enumerated(EnumType.STRING)
    private Status status;

    @Enumerated(EnumType.STRING)
    private Prioridade prioridade;

    private LocalDate dataLimite;

// getters and setters
    public Long getId() {
        return id;
    }

    public void setId(Long id) {
        this.id = id;
    }

    public String getTitulo() {
        return titulo;
    }

    public void setTitulo(String titulo) {
        this.titulo = titulo;
    }

    public String getDescricao() {
        return descricao;
    }

    public void setDescricao(String descricao) {
        this.descricao = descricao;
    }

    public LocalDate getDataCriacao() {
        return dataCriacao;
    }

    public void setDataCriacao(LocalDate dataCriacao) {
        this.dataCriacao = dataCriacao;
    }

    public Status getStatus() {
        return status;
    }

    public void setStatus(Status status) {
        this.status = status;
    }

    public Prioridade getPrioridade() {
        return prioridade;
    }

    public void setPrioridade(Prioridade prioridade) {
        this.prioridade = prioridade;
    }

    public LocalDate getDataLimite() {
        return dataLimite;
    }

    public void setDataLimite(LocalDate dataLimite) {
        this.dataLimite = dataLimite;
    }
}

- src/main/java/com.example.nomeDoKanban > botao direito > New > Package > digite: repository
- crie uma java class INTERFACE com o nome TarefaRepository e 
coloque este código:

package com.example.kanban_api.repository;

import com.example.kanban_api.model.Tarefa;
import org.springframework.data.jpa.repository.JpaRepository;
import org.springframework.stereotype.Repository;

@Repository
public interface TarefaRepository extends JpaRepository<Tarefa, Long> {
    // Métodos de pesquisa ou customizados podem ser adicionados aqui
}

- src/main/java/com.example.nomeDoKanban > botao direito > New > Package > digite: service
- crie uma java class INTERFACE com o nome TarefaService e 
coloque este código:

package com.example.kanban_api.service;

import com.example.kanban_api.model.Tarefa;
import com.example.kanban_api.repository.TarefaRepository;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import java.util.List;
import java.util.Optional;

@Service
public class TarefaService {

    private final TarefaRepository tarefaRepository;

    @Autowired
    public TarefaService(TarefaRepository tarefaRepository) {
        this.tarefaRepository = tarefaRepository;
    }

// criar uma nova tarefa
    public Tarefa criarTarefa(Tarefa tarefa) {
        return tarefaRepository.save(tarefa);
    }

// listar uma nova tarefa
    public List<Tarefa> listarTarefas() {
        return tarefaRepository.findAll();
    }

// obter tarefa por ID
    public Optional<Tarefa> obterTarefaPorId(Long id) {
        return tarefaRepository.findById(id);
    }

// atualizar tarefa
    public Tarefa atualizarTarefa(Tarefa tarefa) {
        return tarefaRepository.save(tarefa);
    }

// deletar tarefa
    public void deletarTarefa(Long id) {
        tarefaRepository.deleteById(id);
    }
}

- src/main/java/com.example.nomeDoKanban > botao direito > New > Package > digite: controller
- crie uma java class INTERFACE com o nome TarefaController e 
coloque este código:

package com.example.kanban_api.controller;

import com.example.kanban_api.model.Tarefa;
import com.example.kanban_api.service.TarefaService;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;

import java.util.List;
import java.util.Optional;

@RestController
@RequestMapping("/api/tarefas")
public class TarefaController {

    private final TarefaService tarefaService;

    @Autowired
    public TarefaController(TarefaService tarefaService) {
        this.tarefaService = tarefaService;
    }

// criar nova tarefa
    @PostMapping
    public ResponseEntity<Tarefa> criarTarefa(@RequestBody Tarefa tarefa) {
        Tarefa novaTarefa = tarefaService.criarTarefa(tarefa);
        return new ResponseEntity<>(novaTarefa, HttpStatus.CREATED);
    }

// listar todas as tarefas
    @GetMapping
    public List<Tarefa> listarTarefas() {
        return tarefaService.listarTarefas();
    }

// obter tarefa por ID
    @GetMapping("/{id}")
    public ResponseEntity<Tarefa> obterTarefaPorId(@PathVariable Long id) {
        Optional<Tarefa> tarefa = tarefaService.obterTarefaPorId(id);
        return tarefa.map(ResponseEntity::ok).orElseGet(() -> ResponseEntity.notFound().build());
    }

// atualizar tarefa
    @PutMapping("/{id}")
    public ResponseEntity<Tarefa> atualizarTarefa(@PathVariable Long id, @RequestBody Tarefa tarefa) {
        tarefa.setId(id);
        Tarefa tarefaAtualizada = tarefaService.atualizarTarefa(tarefa);
        return new ResponseEntity<>(tarefaAtualizada, HttpStatus.OK);
    }

// deletar tarefa
    @DeleteMapping("/{id}")
    public ResponseEntity<Void> deletarTarefa(@PathVariable Long id) {
        tarefaService.deletarTarefa(id);
        return ResponseEntity.noContent().build();
    }
}
__________________________________________________________________________________________________________________________________
PASSO 3: ABRIR O POSTMAN ( DEIXEI O ARQUIVO DELE TAMBÉM ) 

__________________________________________________________________________________________________________________________________
PASSO 4: CONFIGURAR CONFIGURAÇÃO
1. Acesse http://localhost:8080 no navegador para confirmar que a aplicação está rodando.
2. Se configurou corretamente o H2 no próximo passo, poderá acessar o console em http://localhost:8080/h2-console.
